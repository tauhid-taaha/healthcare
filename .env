  const contractAddress = "0x92a3826bC4111e32bc8Fb4187a8D680D3513105B";

  import React, {useState, useEffect} from 'react';
import {ethers} from 'ethers';

import {
  Container,
  Typography,
  TextField,
  Button,
  Card,
  CardContent,
  Box,
  Grid,
  Alert
} from "@mui/material";
import { motion } from "framer-motion";
import LocalHospitalIcon from "@mui/icons-material/LocalHospital";
const Healthcare = () => {
    const [provider, setProvider] = useState(null);
    const [signer, setSigner] = useState(null);
    const [contract, setContract] = useState(null);
     const [patientName, setPatientName] = useState("");
    const [account, setAccount] = useState(null);
    const [isOwner, setIsOwner] = useState(null);
    const [patientID, setPatientID] = useState('');
    const [diagnosis, setDiagnosis] = useState('');
    const [treatment, setTreatment] = useState('');
    const [patientRecords, setPatientRecords] = useState([]);


    const [providerAddress, setProviderAddress] = useState("");
    const contractAddress = "0x92a3826bC4111e32bc8Fb4187a8D680D3513105B";

    const contractABI = [
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "patientID",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "patientName",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "diagnosis",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "treatment",
				"type": "string"
			}
		],
		"name": "addRecord",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "provider",
				"type": "address"
			}
		],
		"name": "authorizeProvider",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [],
		"name": "getOwner",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "patientID",
				"type": "uint256"
			}
		],
		"name": "getPatientRecords",
		"outputs": [
			{
				"components": [
					{
						"internalType": "uint256",
						"name": "recordID",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "patientName",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "diagnosis",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "treatment",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"internalType": "struct HealthcareRecords.Record[]",
				"name": "",
				"type": "tuple[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
];

    useEffect(() => {
        const connectWallet = async () => {
            try {
                const provider = new ethers.providers.Web3Provider(window.ethereum);
                await provider.send('eth_requestAccounts', []);
                const signer = provider.getSigner();
                setProvider(provider);
                setSigner(signer);

                const accountAddress = await signer.getAddress();
                setAccount(accountAddress);

                console.log(accountAddress);

                const contract = new ethers.Contract(contractAddress, contractABI, signer);
                setContract(contract);

                const ownerAddress = await contract.getOwner();
                console.log(accountAddress);
                console.log(ownerAddress);
                setIsOwner(accountAddress.toLowerCase() === ownerAddress.toLowerCase());

               

            } catch (error) {
                console.error("Error connecting to wallet: ", error);
            }

        };
        connectWallet();

    }, []);


    const fetchPatientRecords = async () => {
        try {
            const records = await contract.getPatientRecords(patientID);
            console.log(records);
            setPatientRecords(records);

        } catch(error) {
            console.error("Error fetching patient records", error);
        }
    }

    const addRecord = async () => {
        try {
            const tx = await contract.addRecord(patientID, "Alice", diagnosis, treatment);
            await tx.wait();
            fetchPatientRecords();
            await tx.wait();
            alert(`Provider ${providerAddress} authorized successfully`);

        } catch(error) {
            console.error("Error adding records", error);
        }

    }


    const authorizeProvider = async () => {
        if (isOwner){
            try {
                const tx = await contract.authorizeProvider(providerAddress);
                await tx.wait();
                alert(`Provider ${providerAddress} authorized successfully`);

            } catch(error) {
                console.error("Only contract owner can authorize different providers");
            }
        } else {
            alert("Only contract owner can call this function");
        }
    }

    return (
    <Container maxWidth="md" sx={{ mt: 5 }}>
      {/* Header */}
      <Box textAlign="center" mb={4}>
        <LocalHospitalIcon color="primary" sx={{ fontSize: 50 }} />
        <Typography variant="h3" fontWeight="bold">
          Blockchain Healthcare DApp
        </Typography>
        {account && (
          <Alert severity="info" sx={{ mt: 2 }}>
            Connected Account: {account}
          </Alert>
        )}
        {isOwner && (
          <Alert severity="success" sx={{ mt: 1 }}>
            You are the contract owner
          </Alert>
        )}
      </Box>

      {/* 1. Get Patient Records */}
      <Card
        component={motion.div}
        whileHover={{ scale: 1.02 }}
        sx={{ mb: 3, borderRadius: 3, boxShadow: 4 }}
      >
        <CardContent>
          <Typography variant="h5" gutterBottom>
            Get Patient Records
          </Typography>
          <Box display="flex" gap={2}>
            <TextField
              label="Patient ID"
              variant="outlined"
              fullWidth
              value={patientID}
              onChange={(e) => setPatientID(e.target.value)}
            />
            <Button
              variant="contained"
              onClick={() => fetchPatientRecords(patientID)}
            >
              Fetch
            </Button>
          </Box>

          {/* Display fetched records */}
          <Box mt={2}>
            {patientRecords && patientRecords.length > 0 ? (
              patientRecords.map((record, index) => (
                <Card
                  key={index}
                  variant="outlined"
                  sx={{ mb: 2, p: 2, borderRadius: 2 }}
                >
                  <Typography>
                    <strong>Record ID:</strong> {record.recordID.toNumber()}
                  </Typography>
                  <Typography>
                    <strong>Name:</strong> {record.patientName}
                  </Typography>
                  <Typography>
                    <strong>Diagnosis:</strong> {record.diagnosis}
                  </Typography>
                  <Typography>
                    <strong>Treatment:</strong> {record.treatment}
                  </Typography>
                  <Typography>
                    <strong>Timestamp:</strong>{" "}
                    {new Date(record.timestamp.toNumber() * 1000).toLocaleString()}
                  </Typography>
                </Card>
              ))
            ) : (
              <Typography>No records found.</Typography>
            )}
          </Box>
        </CardContent>
      </Card>

      {/* 2. Add Patient Record */}
      <Card
        component={motion.div}
        whileHover={{ scale: 1.02 }}
        sx={{ mb: 3, borderRadius: 3, boxShadow: 4 }}
      >
        <CardContent>
          <Typography variant="h5" gutterBottom>
            Add Patient Record
          </Typography>
          <Grid container spacing={2}>
            <Grid item xs={12} sm={3}>
              <TextField
                label="Patient ID"
                variant="outlined"
                fullWidth
                value={patientID}
                onChange={(e) => setPatientID(e.target.value)}
              />
            </Grid>
            <Grid item xs={12} sm={9}>
              <TextField
                label="Patient Name"
                variant="outlined"
                fullWidth
                value={patientName}
                onChange={(e) => setPatientName(e.target.value)}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                label="Diagnosis"
                variant="outlined"
                fullWidth
                value={diagnosis}
                onChange={(e) => setDiagnosis(e.target.value)}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                label="Treatment"
                variant="outlined"
                fullWidth
                value={treatment}
                onChange={(e) => setTreatment(e.target.value)}
              />
            </Grid>
          </Grid>
          <Button
            variant="contained"
            color="secondary"
            sx={{ mt: 2 }}
            onClick={() =>
              addRecord(patientID, patientName, diagnosis, treatment)
            }
          >
            Add Record
          </Button>
        </CardContent>
      </Card>

      {/* 3. Authorize Provider */}
      {isOwner && (
        <Card
          component={motion.div}
          whileHover={{ scale: 1.02 }}
          sx={{ mb: 3, borderRadius: 3, boxShadow: 4 }}
        >
          <CardContent>
            <Typography variant="h5" gutterBottom>
              Authorize Healthcare Provider
            </Typography>
            <Box display="flex" gap={2}>
              <TextField
                label="Provider Address"
                variant="outlined"
                fullWidth
                value={providerAddress}
                onChange={(e) => setProviderAddress(e.target.value)}
              />
              <Button
                variant="contained"
                color="success"
                onClick={() => authorizeProvider(providerAddress)}
              >
                Authorize
              </Button>
            </Box>
          </CardContent>
        </Card>
      )}
    </Container>
  );
};


export default Healthcare;
